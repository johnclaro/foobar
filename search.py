def find_shortest_path(graph, start, end, path=[]):
    # maintain a queue of paths
    queue = []
    # push the first path into the queue
    queue.append([start])
    while queue:
        # get the first path from the queue
        path = queue.pop(0)
        # get the last node from the path
        node = path[-1]
        # path found
        if node == end:
            return path
        # enumerate all adjacent nodes,
        # construct a new path and push it into the queue
        for adjacent in graph.get(node, []):
            new_path = list(path)
            new_path.append(adjacent)
            queue.append(new_path)
            for q in queue:
                print q
    return queue


def solution(src, dest):
    chessboard = {
        0: [10, 17],
        1: [11, 18],
        2: [8, 12, 16, 19],
        3: [9, 13, 17, 20],
        4: [10, 14, 18, 21],
        5: [11, 15, 19, 22],
        6: [12, 20, 23],
        7: [13, 21],
        8: [2, 18, 25],
        9: [3, 19, 26],
        10: [0, 4, 16, 20, 24, 27],
        11: [1, 5, 17, 21, 25, 28],
        12: [2, 6, 18, 22, 26, 29],
        13: [3, 7, 19, 23, 27, 30],
        14: [4, 20, 28, 31],
        15: [5, 21, 29],
        16: [1, 10, 26, 33],
        17: [0, 2, 11, 27, 34],
        18: [1, 3, 8, 12, 24, 28, 32, 35],
        19: [2, 4, 9, 13, 25, 29, 33, 36],
        20: [3, 5, 10, 14, 26, 30, 34, 37],
        21: [4, 6, 11, 15, 27, 31, 35, 38],
        22: [5, 7, 12, 28, 36, 39],
        23: [6, 13, 29, 37],
        24: [9, 18, 34, 41],
        25: [8, 10, 19, 35, 42],
        26: [9, 11, 16, 20, 32, 36, 40, 43],
        27: [10, 12, 17, 21, 33, 37, 41, 44],
        28: [11, 13, 18, 22, 34, 38, 42, 45],
        29: [12, 14, 19, 23, 35, 39, 43, 46],
        30: [13, 15, 20, 36, 44, 47],
        31: [14, 21, 37, 45],
        32: [17, 26, 42, 49],
        33: [16, 18, 27, 43, 50],
        34: [17, 19, 24, 28, 40, 44, 48, 51],
        35: [18, 20, 25, 29, 41, 45, 49, 52],
        36: [19, 21, 26, 30, 42, 46, 50, 53],
        37: [20, 22, 27, 31, 43, 47, 51, 54],
        38: [21, 23, 28, 44, 52, 55],
        39: [22, 29, 45, 53],
        40: [25, 34, 50, 57],
        41: [24, 26, 35, 51, 58],
        42: [25, 27, 32, 36, 48, 52, 56, 59],
        43: [26, 28, 33, 37, 49, 53, 57, 60],
        44: [27, 29, 34, 38, 50, 54, 58, 61],
        45: [28, 30, 35, 39, 51, 55, 59, 62],
        46: [29, 31, 36, 52, 60, 63],
        47: [30, 37, 53, 61],
        48: [33, 42, 58],
        49: [32, 34, 43, 59],
        50: [33, 35, 40, 44, 56, 60],
        51: [34, 36, 41, 45, 57, 61],
        52: [35, 37, 42, 46, 58, 62],
        53: [36, 38, 43, 47, 59, 63],
        54: [37, 39, 44, 60],
        55: [38, 45, 61],
        56: [41, 50],
        57: [40, 42, 51],
        58: [41, 43, 48, 52],
        59: [42, 44, 49, 53],
        60: [43, 45, 50, 54],
        61: [44, 46, 51, 55],
        62: [45, 47, 52],
        63: [46, 53],
    }
    path = find_shortest_path(chessboard, src, dest)
    print path


if __name__ == '__main__':
    solution(19, 36)
